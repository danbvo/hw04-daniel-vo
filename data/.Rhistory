knitr::opts_chunk$set(echo = TRUE)
library(XML)
library(stringr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
type <- str_detect(x$size, "M")
x <- read_archive("ggplot2")
read_archive <- function(x){
master_url <- "http://cran.r-project.org/src/contrib/Archive/"
package <- data.frame(readHTMLTable(paste(master_url,x, sep = "")))
package <- na.omit(package)
package <- subset(package, select = -c(1))
colnames(package) <- c('name', ' last modified', 'size', ' description')
return(package)
}
x <- read_archive("ggplot2")
x
View(x)
type <- str_detect(x$size, "M")
type
length(x$size)
x$size[1]
x$size[2]
type[2]
if (type[2] = TRUE)
if (type[2] == TRUE)
size <- as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000
if (type[2] == TRUE) {
size <- as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000
}
size <- as.numeric(str_replace(x$size, pattern = "M", replacement = ""), na.action(fucking off))*1000
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000)
if (type[2] == TRUE) {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000)
} else {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "K", replacement = ""))
}
if (type[2] == TRUE) {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000)
} else {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "K", replacement = ""))
}
if (type[2] == TRUE) {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000)
} else {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "K", replacement = ""))
}
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "K", replacement = ""))
}
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "K", replacement = ""))}}
if (type[2] == TRUE) {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000)
} else{
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "K", replacement = ""))
}
if (type[2] == TRUE) {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000)
} else {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "K", replacement = ""))
}
if (type[2] == TRUE) {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000)
}
for (i in 1:length(x$size)) {
if (type[i] == TRUE) {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "M", replacement = ""))*1000)
} else {
size <- suppressWarnings(as.numeric(str_replace(x$size, pattern = "K", replacement = ""))
}
sizeK <- suppressWarnings(as.numeric(str_replace(x$size, "K", ""))
size <- as.numeric(str_sub(x$size, end = -2))
library(XML)
library(stringr)
library(ggplot2)
library(dplyr)
#
clean_archive <- function(x){
namecol <- matrix("", nrow = length(splitup), ncol = 1)
for (i in 2:length(splitup)){
namecol[i,] <- splitup[[i]][1]
}
name <- namecol
verscol <- matrix("", nrow = length(splitup), ncol = 1)
for (i in 2:length(splitup)){
verscol[i,] <- splitup[[i]][2]
}
version <- str_sub(verscol, end = -8)
date <- str_sub(x$` last modified`, start = 1, end = 10)
type <- str_detect(x$size, "M")
sizeM <- suppressWarnings(as.numeric(str_replace(x$size, "M", ""))*1000)
sizeK <- suppressWarnings(as.numeric(str_replace(x$size, "K", ""))
size <- as.numeric(str_sub(x$size, end = -2))
sizeK <- suppressWarnings(as.numeric(str_replace(x$size, "K", "")))
size <- as.numeric(str_sub(x$size, end = -2))
clean_package <- data.frame(name, version, date, size)
clean_package <- clean_package[-1,]
return(clean_package)
#
clean_archive <- function(x){
splitup <- str_split(x$name, pattern = "_")
namecol <- matrix("", nrow = length(splitup), ncol = 1)
for (i in 2:length(splitup)){
namecol[i,] <- splitup[[i]][1]
}
name <- namecol
verscol <- matrix("", nrow = length(splitup), ncol = 1)
for (i in 2:length(splitup)){
verscol[i,] <- splitup[[i]][2]
}
version <- str_sub(verscol, end = -8)
date <- str_sub(x$` last modified`, start = 1, end = 10)
type <- str_detect(x$size, "M")
sizeM <- suppressWarnings(as.numeric(str_replace(x$size, "M", ""))*1000)
sizeK <- suppressWarnings(as.numeric(str_replace(x$size, "K", "")))
size <- as.numeric(str_sub(x$size, end = -2))
clean_package <- data.frame(name, version, date, size)
clean_package <- clean_package[-1,]
return(clean_package)
}
raw <- read_archive("ggplot2")
raw <- read_archive("ggplot2")
clean_data <- clean_archive(raw)
clean_data
size <- ifelse(type, sizeM, sizeK)
clean_package <- data.frame(name, version, date, size)
clean_package <- clean_package[-1,]
return(clean_package)
#
clean_archive <- function(x){
splitup <- str_split(x$name, pattern = "_")
namecol <- matrix("", nrow = length(splitup), ncol = 1)
for (i in 2:length(splitup)){
namecol[i,] <- splitup[[i]][1]
}
name <- namecol
verscol <- matrix("", nrow = length(splitup), ncol = 1)
for (i in 2:length(splitup)){
verscol[i,] <- splitup[[i]][2]
}
version <- str_sub(verscol, end = -8)
date <- str_sub(x$` last modified`, start = 1, end = 10)
type <- str_detect(x$size, "M")
sizeM <- suppressWarnings(as.numeric(str_replace(x$size, "M", ""))*1000)
sizeK <- suppressWarnings(as.numeric(str_replace(x$size, "K", "")))
size <- ifelse(type, sizeM, sizeK)
clean_package <- data.frame(name, version, date, size)
clean_package <- clean_package[-1,]
return(clean_package)
}
raw <- read_archive("ggplot2")
raw <- read_archive("ggplot2")
clean_data <- clean_archive(raw)
clean_data
raw <- read_archive("XML")
raw <- read_archive("XML")
clean_data <- clean_archive(raw)
clean_data
write.csv(clean_data, file = "stringr-archive.csv")
plot_archive <- function(clean_data){
clean_data <- arrange(clean_data, clean_data$date)
clean_data$date <- as.Date(clean_data$date)
ggplot(data = clean_data, aes(date, size)) +
geom_step() +
geom_point()
}
raw <- read_archive("dplyr")
raw <- read_archive("dplyr")
clean_data <- clean_archive(raw)
clean_data <- clean_archive(raw)
plot_archive(clean_data)
# 1.5
clean_dplyr <- clean_archive(read_archive("dplyr"))
write.csv(clean_knitr, file = "knitr-archive.csv")
clean_ggplot2 <- clean_archive(read_archive("ggplot2"))
write.csv(clean_knitr, file = "knitr-archive.csv")
clean_knitr <- clean_archive(read_archive("knitr"))
write.csv(clean_knitr, file = "knitr-archive.csv")
clean_ggplot2 <- clean_archive(read_archive("ggplot2"))
clean_ggplot2 <- clean_archive(read_archive("ggplot2"))
write.csv(clean_ggplot2, file = "ggplot2-archive.csv")
clean_xml <- clean_archive(read_archive("XML"))
clean_xml <- clean_archive(read_archive("XML"))
write.csv(clean_xml, file = "xml-archive.csv")
table <- rbind(clean_dplyr, clean_knitr, clean_ggplot2, clean_xml)
table$date <- as.Date(table$date)
ggplot(table, aes(date, size, color = name)) +
geom_step(direction = "hv")
clean_data
getwd()
setwd("/Users/danbvo/Desktop/Academic-Portfolio/Stat-133/HW/hw04/data")
getwd()
setwd("/Users/danbvo/Desktop/Academic-Portfolio/Stat-133/HW/hw04/data")
getwd()
library(XML)
library(stringr)
library(ggplot2)
library(dplyr)
getwd()
tbl_html <- data.frame(readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr'))
tbl_html <- na.omit(tbl_html)
tbl_html <- subset(tbl_html, select = -c(1))
colnames(tbl_html) <- c('name', ' last modified', 'size', ' description')
tbl_html
read_archive <- function(x){
master_url <- "http://cran.r-project.org/src/contrib/Archive/"
package <- data.frame(readHTMLTable(paste(master_url,x, sep = "")))
package <- na.omit(package)
package <- subset(package, select = -c(1))
colnames(package) <- c('name', ' last modified', 'size', ' description')
return(package)
}
x <- read_archive("ggplot2")
#
clean_archive <- function(x){
splitup <- str_split(x$name, pattern = "_")
namecol <- matrix("", nrow = length(splitup), ncol = 1)
for (i in 2:length(splitup)){
namecol[i,] <- splitup[[i]][1]
}
name <- namecol
verscol <- matrix("", nrow = length(splitup), ncol = 1)
for (i in 2:length(splitup)){
verscol[i,] <- splitup[[i]][2]
}
version <- str_sub(verscol, end = -8)
date <- str_sub(x$` last modified`, start = 1, end = 10)
type <- str_detect(x$size, "M")
sizeM <- suppressWarnings(as.numeric(str_replace(x$size, "M", ""))*1000)
sizeK <- suppressWarnings(as.numeric(str_replace(x$size, "K", "")))
size <- ifelse(type, sizeM, sizeK)
clean_package <- data.frame(name, version, date, size)
clean_package <- clean_package[-1,]
return(clean_package)
}
raw <- read_archive("XML")
clean_data <- clean_archive(raw)
write.csv(clean_data, file = "stringr-archive.csv")
plot_archive <- function(clean_data){
clean_data <- arrange(clean_data, clean_data$date)
clean_data$date <- as.Date(clean_data$date)
ggplot(data = clean_data, aes(date, size)) +
geom_step() +
geom_point()
}
raw <- read_archive("dplyr")
clean_data <- clean_archive(raw)
plot_archive(clean_data)
# 1.5
clean_dplyr <- clean_archive(read_archive("dplyr"))
write.csv(clean_dplyr, file = "dplyr-archive.csv")
clean_knitr <- clean_archive(read_archive("knitr"))
write.csv(clean_knitr, file = "knitr-archive.csv")
clean_ggplot2 <- clean_archive(read_archive("ggplot2"))
write.csv(clean_ggplot2, file = "ggplot2-archive.csv")
clean_xml <- clean_archive(read_archive("XML"))
write.csv(clean_xml, file = "xml-archive.csv")
table <- rbind(clean_dplyr, clean_knitr, clean_ggplot2, clean_xml)
table$date <- as.Date(table$date)
ggplot(table, aes(date, size, color = name)) +
geom_step(direction = "hv")
clean_data <- clean_archive(raw)
clean_data
ggplot(table, aes(date, size, color = name)) +
geom_step(direction = "hv") +
facet_wrap(~name, scales = "free")
ggplot(table, aes(date, size, color = name)) +
geom_step(direction = "hv") +
facet_wrap(~name)
ggplot(table, aes(date, size, color = name)) +
geom_step(direction = "hv") +
facet_wrap(~name, scales = "free")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd("/Users/danbvo/Desktop/Academic-Portfolio/Stat-133/HW/hw04/data")
url = "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/text-emotion.csv"
download.file(url, destfile = "text-emotion.csv")
dat <- read.csv(file = "text-emotion.csv")
# number of characters without space
a <- str_replace_all(dat$content, pattern = " |  ", replacement = "")
dat$num_char <- as.numeric(str_count(a))
summary(dat$num_char)
ggplot(dat) +
geom_histogram(aes(dat$num_char), binwidth = 5)+
theme_classic()
View(dat)
subset <- dat[1:100]
subset <- dat[1:100,]
subset
View(subset)
str_extract(subset, \\@)
str_extract(subset, "\\@")
str_extract(subset, pattern = "@")
str_extract(subset, pattern = "\\@")
subset
str_extract_all(subset, pattern = "\\@")
subset
dat
str_extract_all(dat, pattern = "\\@")
str_extract_all(subset[1:100], pattern = "\\@")
str_extract_all(subset, pattern = "\\@")
str_extract_all(subset$content, pattern = "\\@")
str_extract(subset$content, pattern = "\\@")
str_split(subset$content, pattern = " ")
subset <- str_split(subset$content, pattern = " ")
subset
subset[1]
str_detect(subset, "\\@")
str_extract(subset, "\\@")
subset
str_detect(subset, "\\@")
a <- str_detect(subset, "\\@")
a
if (a==TRUE)
str_extract(subset, "\\@")
if (a==TRUE) {
str_extract(subset, "\\@")
}
str_locate(subset, "\\@")
unlist(subset)
unlist(subset)
dat
dat$content
str_extract(dat$content, pattern = "\\@")
subset <- str_split(subset$content, pattern = " ")
subset <- str_split(dat$content, pattern = " ")
View(subset)
View(subset)
subset[1:100,]
subset[1:100]
subset <- unlist(str_split(dat$content, pattern = " "))
subset <- unlist(str_split(dat$content, pattern = " "))
subset[1:100]
a <- str_detect(subset, "\\@")
a[1:100]
a <- str_match(subset, "\\@")
a[1:100]
a <- str_match_all(subset, "\\@")
a[1:100]
a <- str_match(subset, "\\@")
a <- str_detect(subset, "\\@")
subset[1:100]
a
if (a[i]==TRUE) {
paste(subset[i])
}
string@ <- paste(subset[i])
if (a[i]==TRUE) {
string@ <- paste(subset[i])
for (i in 1:length(a)) {
if (a[i]==TRUE) {
string@ <- paste(subset[i])
for (i in 1:length(a)) {
if (a[i]==TRUE) {
string <- paste(subset[i])
}
}
string
length(a)
for (i in 1:length(a)) {
if (a[i]==TRUE) {
string <- paste(subset[i])
}
}
string
string[i] <- paste(subset[i])
if (a[i]==TRUE) {
string[i] <- paste(subset[i])
}
for (i in 1:length(a)) {
if (a[i]==TRUE) {
string[i] <- paste(subset[i])
}
}
for (i in 1:length(a)) {
if (a[i]==TRUE) {
string[i] <- paste(subset[i])
}
}
string
na.omit(string)
string <- na.omit(string)
string
str_count(string, "\\@")
string
str_detect(string, pattern = c("!", "#", "$", "%", "^", "&", "*", "(", ")", "`", "~", "=", "<", ">"))
str_detect(string, pattern = "!|#")
str_detect(string, pattern = "!|#|$|%|^|&|*|(|)|~|`|<|>|?|/|\|-|+|{|}|[|]|:|;")
str_detect(string, pattern = "!|#|$|%|^|&|*|(|)|~|`|<|>|?|-|+|:|;")
str_detect(string, pattern = "!|#|$|%|^|&|*")
str_detect(string, pattern = "!|#")
str_detect(string, pattern = "!|#|$")
str_detect(string, pattern = "!|#|$|%")
string
str_detect(string, pattern = "!")
str_detect(string, pattern = "!|#")
str_detect(string, pattern = "!|#|$")
str_detect(string, pattern = "!|#|%")
str_detect(string, pattern = "!|#|%|^")
string
str_count(string, pattern = nchar(string)==1)
nchar(string)
b <- nchar(string)
for (i in 1:length(b)) {
if (b[i]=>1){
if (b[i]>=1){
string[i] <- paste(string[i]_)
for (i in 1:length(b)) {
if (b[i]>=1){
string[i] <- paste(string[i])
}
}
string
if (b[i]>1){
string[i] <- paste(string[i])
}
for (i in 1:length(b)) {
if (b[i]>1){
string[i] <- paste(string[i])
}
}
string
if (b[i]>=2){
string[i] <- paste(string[i])
}
for (i in 1:length(b)) {
if (b[i]>=2){
string[i] <- paste(string[i])
}
}
string
function (x, type = "chars", allowNA = FALSE, keepNA = NA)
b <- nchar(string)
b
string[i] <- paste(NA)
if (b[i]==1){
string[i] <- paste(NA)
}
for (i in 1:length(b)) {
if (b[i]==1){
string[i] <- paste(NA)
}
}
string
string <- na.omit(string)
string
string[i] <- print(NA)
if (b[i]==1){
string[i] <- print(NA)
}
for (i in 1:length(b)) {
if (b[i]==1){
string[i] <- print(NA)
}
}
string <- na.omit(string)
string
for (i in 1:length(b)) {
if (b[i]==1){
string[i] <- print(NA)
}
}
string
for (i in 1:length(a)) {
if (a[i]==TRUE) {
string[i] <- paste(subset[i])
}
}
string <- na.omit(string)
string
c <- str_detect(string, pattern = "!")
c
c <- str_detect(string, pattern = "!|~")
c
c <- str_match(string, pattern = "!|~")
c
c <- unlist(str_match(string, pattern = "!|~"))
c
c <- str_match(string, pattern = "!|~|#")
c
c <- str_match(string, pattern = "!|~|#|%")
c
c <- str_match(string, pattern = "!|~|#|%|^")
c
c <- str_match(string, pattern = "!|~|#|%|&")
c
c <- str_match(string, pattern = "!|~|#|%|&|*")
c <- str_match(string, pattern = "!|~|#|%|&")
c
c <- str_detect(string, pattern = "!|~|#|%|&")
c
for (i in 1:length(c)){
if (c[i]==TRUE) {
string <- print(NA)
}
}
string[i] <- print(NA)
for (i in 1:length(a)) {
if (a[i]==TRUE) {
string[i] <- paste(subset[i])
}
}
for (i in 1:length(c)){
if (c[i]==TRUE) {
string[i] <- print(NA)
}
}
for (i in 1:length(a)) {
if (a[i]==TRUE) {
string[i] <- paste(subset[i])
}
}
